plot_ly(x=~date, y=~median) %>%
add_lines(alpha=0.2, name = "Texan cities") %>%
add_lines(name = "Houston", data = filter(txhousing, city == "Houston")) %>%
add_lines(name = "San Antonio", data = filter(txhousing, city == "San Antonio")) %>%
slice(which.max(median), which.min(median))
txhousing
txhousing %>%
plot_ly(x=~date, y=~median) %>%
add_lines(alpha=0.2, name = "Texan cities") %>%
add_lines(name = "Houston", data = filter(txhousing, city == "Houston")) %>%
add_lines(name = "Dallas", data = filter(txhousing, city == "Dallas")) %>%
slice(which.max(median), which.min(median)) %>%
add_lines(name = "Max median", data = filter(txhousing, median == "max"))
txhousing %>%
plot_ly(x=~date, y=~median) %>%
add_lines(alpha=0.2, name = "Texan cities") %>%
add_lines(name = "Houston", data = filter(txhousing, city == "Houston")) %>%
add_lines(name = "Dallas", data = filter(txhousing, city == "Dallas")) %>%
slice(which.max(median), which.min(median)) %>%
add_lines(name = "Max median", data = filter(txhousing, median == max(median))) %>%
add_line(name = "Min median", data = filter(txhousing, median == min(median)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(plotly)
allcities <-txhousing %>%
group_by(city) %>%
plot_ly(x=~date, y=~median) %>%
add_lines(name="Texan cities", alpha=I(0.2))
allcities <-txhousing %>%
group_by(city) %>%
plot_ly(x=~date, y=~median) %>%
add_lines(name="Texan cities", alpha=I(0.2))
layer_city <- function(plot, name) {
plot %>% filter(city == name) %>% add_lines(name = name)
}
allcities %>%
add_fun(layer_city, "Austin") %>%
add_fun(layer_city, "Dallas")
# make the general function:
layer_city <- function(plot, name) {
plot %>% filter(city == name) %>% add_lines(name = name)
}
# reusable function for plotting overall median & IQR
layer_iqr <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
q1 = quantile(median, 0.25, na.rm = TRUE),
#na.rm: logical; if true, any NA and NaN's are removed from x before the quantiles are computed.
m = median(median, na.rm = TRUE),
q3 = quantile(median, 0.75, na.rm = TRUE)
) %>%
add_lines(y = ~m, name = "median", color = I("black")) %>%
add_ribbons(ymin = ~q1, ymax = ~q3, name = "IQR", color = I("yellow"))
}
allcities %>%
add_fun(layer_iqr) %>%
add_fun(layer_city, "Houston") %>%
add_fun(layer_city, "San Antonio")
allcities <-txhousing %>%
group_by(city) %>%
plot_ly(x=~date, y=~median) %>%
add_lines(name="Texan cities", alpha=I(0.2))
layer_city <- function(plot, name) {
plot %>% filter(city == name) %>% add_lines(name = name)
}
layer_maxmin <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
maxmedian = quantile(median, 1, na.rm = TRUE),
minmedian = quantile(median, 0, na.rm = TRUE)
) %>%
add_lines(y = ~maxmedian, name = "max median", color = I("black")) %>%
add_lines(y = ~minmedian, name = "min median", color = I("red"))
allcities %>%
add_fun(layer_city, "Austin") %>%
add_fun(layer_city, "Dallas")
allcities <-txhousing %>%
group_by(city) %>%
plot_ly(x=~date, y=~median) %>%
add_lines(name="Texan cities", alpha=I(0.2))
layer_city <- function(plot, name) {
plot %>% filter(city == name) %>% add_lines(name = name)
}
layer_maxmin <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
maxmedian = quantile(median, 1, na.rm = TRUE),
minmedian = quantile(median, 0, na.rm = TRUE)) %>%
add_lines(y = ~maxmedian, name = "max median", color = I("black")) %>%
add_lines(y = ~minmedian, name = "min median", color = I("red"))}
allcities %>%
add_fun(layer_city, "Austin") %>%
add_fun(layer_city, "Dallas")
allcities <-txhousing %>%
group_by(city) %>%
plot_ly(x=~date, y=~median) %>%
add_lines(name="Texan cities", alpha=I(0.2))
layer_city <- function(plot, name) {
plot %>% filter(city == name) %>% add_lines(name = name)
}
layer_maxmin <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
maxmedian = quantile(median, 1, na.rm = TRUE),
minmedian = quantile(median, 0, na.rm = TRUE)) %>%
add_lines(y = ~maxmedian, name = "max median", color = I("black")) %>%
add_lines(y = ~minmedian, name = "min median", color = I("red"))}
allcities %>%
add_fun(layer_maxmin) %>%
add_fun(layer_city, "Austin") %>%
add_fun(layer_city, "Dallas")
allcities <-txhousing %>%
group_by(city) %>%
plot_ly(x=~date, y=~median) %>%
add_lines(name="Texan cities", alpha=I(0.2))
layer_city <- function(plot, name) {
plot %>% filter(city == name) %>% add_lines(name = name)
}
layer_maxmin <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
maxmedian = quantile(median, 1, na.rm = TRUE),
minmedian = quantile(median, 0, na.rm = TRUE)) %>%
add_lines(y = ~maxmedian, name = "max median", color = I("black")) %>%
add_lines(y = ~minmedian, name = "min median", color = I("purple"))}
allcities %>%
add_fun(layer_maxmin) %>%
add_fun(layer_city, "Austin") %>%
add_fun(layer_city, "Dallas")
allcities <-txhousing %>%
group_by(city) %>%
plot_ly(x=~date, y=~median) %>%
add_lines(name="Texan cities", alpha=I(0.2))
layer_city <- function(plot, name) {
plot %>% filter(city == name) %>% add_lines(name = name)
}
layer_maxmin <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
maxmedian = quantile(median, 1, na.rm = TRUE),
minmedian = quantile(median, 0, na.rm = TRUE)) %>%
add_lines(y = ~maxmedian, name = "max median", color = I("black")) %>%
add_lines(y = ~minmedian, name = "min median", color = I("green"))}
allcities %>%
add_fun(layer_maxmin) %>%
add_fun(layer_city, "Austin") %>%
add_fun(layer_city, "Dallas")
data("airmiles")
plot_ly(x=time(airmiles), y=airmiles, type="scatter", mode="lines+markers")
#economics
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(tidyverse)
library(gapminder)
p<-ggplot(gapminder, aes(x=gdpPercap, y=lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids=country)) +
scale_x_log10()
ggplotly(p)
p<-ggplot(mtcars, aes(x=wt, y=mpg))+
geom_point(aes(col=factor(cyl)))+
geom_smooth(aes(col=factor(cyl)), method="lm", se=F)+
annotate(geom="text", x=2,y=25, label="y=ax+b")
ggplotly(p)
p <-ggplot(gapminder, aes(x=gdpPercap, y=lifeExp, color = continent, frame = year)) +
geom_point(aes(size = pop)) +
geom_smooth(aes(color=continent), method = "lm", se=F)+
scale_x_log10()
ggplotly(p)
gapminder %>%
filter(year==2007) %>%
plot_ly(x=~pop, y=~lifeExp, type = "scatter", mode = "markers", color = ~continent) %>%
layout(xaxis= list(type="log10")) %>%
slice(which.max(lifeExp), which.min(lifeExp)) %>%
add_annotations(text = ~country)
gapminder2007 <- filter(year==2007)
gapminder2007 <- filter(gapminder, year==2007)
g<- ggplot(gapminder2007, aes(x=pop, y=lifeExp))+
geom_point(aes(color=continent))
gapminder2007 <- filter(gapminder, year==2007)
g<- ggplot(gapminder2007, aes(x=pop, y=lifeExp))+
geom_point(aes(color=continent))+
scale_x_log10()
ggplotly(g)
gapminder2007 <- filter(gapminder, year==2007)
g<- ggplot(gapminder2007, aes(x=pop, y=lifeExp))+
geom_point(aes(color=continent))+
scale_x_log10()
ggplotly(g) %>%
slice(which.max(lifeExp), which.min(lifeExp))%>%
add_annotations(text=~country)
gapminder2007 <- filter(gapminder, year==2007)
g<- ggplot(gapminder2007, aes(x=pop, y=lifeExp))+
geom_point(aes(color=continent))+
scale_x_log10()
gapminder2007 %>%
ggplotly(g) %>%
slice(which.max(lifeExp), which.min(lifeExp))%>%
add_annotations(text=~country)
gapminder %>%
filter(year==2007) %>%
plot_ly(x=~pop, y=~lifeExp, type = "scatter", mode = "markers", color = ~continent) %>%
layout(xaxis= list(type="log10")) %>%
slice(which.max(lifeExp), which.min(lifeExp)) %>%
add_annotations(text = ~country)
gapminder %>%
filter(year==2007) %>%
plot_ly(x=~pop, y=~lifeExp, type = "scatter", mode = "markers", color = ~continent) %>%
layout(xaxis= list(type="log")) %>%
slice(which.max(lifeExp), which.min(lifeExp)) %>%
add_annotations(text = ~country)
gapminder %>%
filter(year==2007) %>%
plot_ly(x=~pop, y=~lifeExp, type = "scatter", mode = "markers", color = ~continent) %>%
layout(xaxis= list(type="log")) %>%
slice(which.max(lifeExp), which.min(lifeExp)) %>%
add_annotations(text = ~country, ax = 3, ay=-48)
gapminder %>%
filter(year==2007) %>%
plot_ly(x=~pop, y=~lifeExp, type = "scatter", mode = "markers", color = ~continent) %>%
layout(xaxis= list(type="log")) %>%
slice(which.max(lifeExp), which.min(lifeExp)) %>%
add_annotations(text = ~country, ax = 3, ay=48)
gapminder %>%
filter(year==2007) %>%
plot_ly(x=~pop, y=~lifeExp, type = "scatter", mode = "markers", color = ~continent) %>%
slice(which.max(lifeExp), which.min(lifeExp)) %>%
add_annotations(text = ~country)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(readr)
incumbents_subset <- read_csv("GitHub/QTM200Spring2020/problem_sets/PS3/incumbents_subset.csv")
View(incumbents_subset)
incumbents_subset <- read_csv("GitHub/QTM200Spring2020/problem_sets/PS3/incumbents_subset.csv")
betas <- solve((t(difflog)%*%difflog)) %*% (t(difflog)%*%voteshare)
incumbents_subset <- read_csv("GitHub/QTM200Spring2020/problem_sets/PS3/incumbents_subset.csv")
difflog <- select(incumbents_subset, difflog)
voteshare <- select(incumbents_subset, voteshare)
betas <- solve((t(difflog)%*%difflog)) %*% (t(difflog)%*%voteshare)
fit <- lm(voteshare ~ difflog, data=incumbents_subset)
summary(fit)
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point()+
geom_smooth(method="lm")
plot(incumbents_subset$voteshare ~ incumbents_subset$difflog)
abline(fitmodel)
fitmodel
fitmodel <- lm(voteshare ~ difflog, data=incumbents_subset)
fitmodel
abline(fitmodel)
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point()+
geom_smooth(method="lm")
plot(incumbents_subset$voteshare ~ incumbents_subset$difflog)
fitmodel
abline(fitmodel)
preds <- predict (fitmodel)
segements(incumbents_subset$difflog, incumbents_subset$voteshare, incumbents_subset$difflog, preds)
preds <- predict (fitmodel) segements(incumbents_subset$difflog, incumbents_subset$voteshare, incumbents_subset$difflog, preds)
abline(resid(fitmodel))
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point()+
geom_point(aes(y=predicted), shape =1)
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point()+
geom_point(aes(y= predicted), shape =1)+
geom_smooth(method="lm")
incumbents_subset$predicted <- predict(fitmodel)
incumbents_subset$residuals <- residuals(fit)
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point()+
geom_point(aes(y= predicted), shape =1)+
geom_smooth(method="lm")
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point()+
geom_point(aes(y= predicted), shape =1)+
geom_segment(aes(xend = difflog, yend = predicted))
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point()+
geom_point(aes(y= predicted), shape =1)+
geom_segment(aes(xend = difflog, yend = predicted))+
geom_smooth(method="lm")
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point()+
geom_point(aes(y= predicted), shape =1)+
geom_segment(aes(xend = difflog, yend = predicted) alpha=I(0.1))+
geom_smooth(method="lm")
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point()+
geom_point(aes(y= predicted), shape =1)+
geom_segment(aes(xend = difflog, yend = predicted) alpha=I(0.1))+
geom_smooth(method="lm")
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point()+
geom_point(aes(y= predicted), shape =1, alpha = I(0.1))+
geom_segment(aes(xend = difflog, yend = predicted) alpha=I(0.1))+
geom_smooth(method="lm")
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point(alpha = I(0.5))+
geom_point(aes(y= predicted), shape =1, alpha = I(0.1))+
geom_segment(aes(xend = difflog, yend = predicted) alpha=I(0.1))+
geom_smooth(method="lm")
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point(alpha = I(0.5))+
geom_point(aes(y= predicted), shape =1, alpha = I(0.1))+
geom_segment(aes(xend = difflog, yend = predicted), alpha=I(0.1))+
geom_smooth(method="lm")
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point(alpha = I(0.5))+
geom_point(aes(y= predicted), shape =1, alpha = I(0.1))+
geom_segment(aes(xend = difflog, yend = predicted), alpha=I(0.1))+
geom_smooth(method="lm", se=F)
ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point(alpha = I(0.5))+
geom_point(aes(y= predicted), shape =1, alpha = I(0.1))+
geom_segment(aes(xend = difflog, yend = predicted), alpha=I(0.1))+
geom_smooth(method="lm", se=F, color = "lightgrey")
abline(fitmodel)
plot(incumbents_subset$voteshare ~ incumbents_subset$difflog)
abline(fitmodel)
plot_residuals
plot_residuals <- ggplot(incumbents_subset, aes(x=difflog, y=voteshare))+
geom_point(alpha = I(0.5))+
geom_point(aes(y= predicted), shape =1, alpha = I(0.1))+
geom_segment(aes(xend = difflog, yend = predicted), alpha=I(0.1))+
geom_smooth(method="lm", se=F, color = "lightgrey")
plot_residuals
library(ggplot2)
library(dplyr)
library(tidyverse)
library(readr)
#Question 1
incumbents_subset <- read_csv("GitHub/QTM200Spring2020/problem_sets/PS3/incumbents_subset.csv")
difflog <- select(incumbents_subset, difflog)
voteshare <- select(incumbents_subset, voteshare)
fitmodel <- lm(voteshare ~ difflog, data=incumbents_subset)
summary(fit)
# Question 2
fitmodel2 <- lm(presvote~difflog, data = incumbents_subset)
fitmodel2 <- lm(presvote~difflog, data = incumbents_subset)
summary(fitmodel2)
plot2<- ggplot(incumbents_subset, aes(x=difflog, y=presvote))+
geom_point(alpha=I(0.5))+
geom_smooth(method = "lm", se = F, color = "lightgrey")
plot2
incumbents_subset$prediction <- predict(fitmodel2)
incumbents_subset$residuals2 <- residuals(fitmodel2)
plot2_residuals <- plot2 +
geom_point(aes(y=prediction), shape = 1, alpha = I(0.1))+
geom_segment((aes(xend=difflog, yend=prediction), alpha= I(0.1)))
plot2_residuals
plot2_residuals <- plot2 +
geom_point(aes(y=prediction), shape = 1, alpha = I(0.1))+
geom_segment((aes(xend=difflog, yend=prediction) ,alpha= I(0.1)))
plot2_residuals <- plot2 +
geom_point(aes(y=prediction), shape = 1, alpha = I(0.1))+
geom_segment(aes(xend=difflog, yend=prediction) ,alpha= I(0.1))
plot2_residuals
incumbents_subset$prediction <- predict(fitmodel2)
incumbents_subset$residuals2 <- residuals(fitmodel2)
plot2_residuals
incumbents_subset$prediction <- predict(fitmodel2)
incumbents_subset$prediction
plot2_residuals <- plot2 +
geom_point(aes(y=prediction), shape = 1, alpha = I(0.1))+
geom_segment(aes(xend=difflog, yend=prediction) ,alpha= I(0.1))
plot2_residuals
plot2_residuals <- plot2 +
geom_point(aes(y=incumbenets_subset_prediction), shape = 1, alpha = I(0.1))+
geom_segment(aes(xend=difflog, yend=incumbents_subsest$prediction),alpha= I(0.1))
plot2_residuals
plot2_residuals <- plot2 +
geom_point(aes(y=incumbenets_subset$prediction), shape = 1, alpha = I(0.1))+
geom_segment(aes(xend=difflog, yend=incumbents_subsest$prediction),alpha= I(0.1))
plot2_residuals
plot2_residuals <-ggplot(incumbents_subset, aes(x=difflog, y=presvote))+
geom_point(alpha = I(0.5))+
geom_point(aes(y= prediction), shape =1, alpha = I(0.1))+
geom_segment(aes(xend = difflog, yend = prediction), alpha=I(0.1))+
geom_smooth(method="lm", se=F, color = "lightgrey")
plot2_residuals
plot2<- ggplot(incumbents_subset, aes(x=difflog, y=presvote))+
geom_point(alpha=I(0.5))+
geom_smooth(method = "lm", se = F, color = "lightgrey")
plot2
plot2_residuals
View(plot2_residuals)
plot3<- ggplot(incumbents_subset, aes(x=presvote, y=voteshare))+
geom_point(alpha=I(0.5))+
geom_smooth(method = "lm", se=F, color = "lightgrey")
plot3
incumbents_subset$predicted3 <- predict(fitmodel3)
incumbents_subset$residuals3 <- residuals(fitmodel3)
plot3_residuals <-ggplot(incumbents_subset, aes(x=presvote, y=voteshare))+
geom_point(alpha = I(0.5))+
geom_point(aes(y= predicted3), shape =1, alpha = I(0.1))+
geom_segment(aes(xend = presvote, yend = predicted3), alpha=I(0.1))+
geom_smooth(method="lm", se=F, color = "lightgrey")
plot3_residuals
incumbents_subset$predicted3 <- predict(fitmodel3)
fitmodel3 <- lm(voteshare ~ presvote, data=incumbents_subset)
summary(fitmodel3)
plot3<- ggplot(incumbents_subset, aes(x=presvote, y=voteshare))+
geom_point(alpha=I(0.5))+
geom_smooth(method = "lm", se=F, color = "lightgrey")
plot3
incumbents_subset$predicted3 <- predict(fitmodel3)
incumbents_subset$residuals3 <- residuals(fitmodel3)
plot3_residuals <-ggplot(incumbents_subset, aes(x=presvote, y=voteshare))+
geom_point(alpha = I(0.5))+
geom_point(aes(y= predicted3), shape =1, alpha = I(0.1))+
geom_segment(aes(xend = presvote, yend = predicted3), alpha=I(0.1))+
geom_smooth(method="lm", se=F, color = "lightgrey")
plot3_residuals
View(plot3_residuals)
plot2
View(plot2_residuals)
plot2_residuals
View(plot2_residuals)
plot3
summary(fitmodel)
summary(fitmodel2)
summary(fitmodel3)
incumbents_subset$residuals1 <- residuals(fitmodel)
#Question 4
fitmodel4 <- lm(residuals1 ~ residuals2, data = incumbents_subset)
summary(fitmodel4)
plot4 <- ggplot(incumbents_subset, aes(x=residuals2, y=residuals1))+
geom_point()+
geom_smooth(method = "lm")
plot4
plot4 <- ggplot(incumbents_subset, aes(x=residuals2, y=residuals1))+
geom_point()+
geom_smooth(method = "lm", se=F, color = "lightgrey")
plot4
#Question 5
multiplefit<- lm(voteshare~difflog+presvote, data = incumbents_subset)
summary(multiplefit)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(readr)
#Question 1
incumbents_subset <- read_csv("GitHub/QTM200Spring2020/problem_sets/PS3/incumbents_subset.csv")
fitmodel <- lm(voteshare ~ difflog, data=incumbents_subset)
summary(fitmodel)
insteall.packages(Car)
install.packages(Car)
library(car)
install.packages(car)
"car"
install.packages(car)
install.packages("car")
library(car)
install.packages("Car")
install.packages("car")
install.packages("car")
library(car)
data(Prestige)
help(Prestige)
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# set wd
setwd('~/Documents/GitHub/QTM200Spring2020/labs/Lab12')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("faraway"), pkgTest)
load("Busby_Football.RData")
colnames(x)
load("Busby_Football.RData")
load("Busby_Football.RData")
colnames(x)
load("Busby_Football.RData")
setwd("~/GitHub/QTM200Spring2020/labs/Lab12")
load("Busby_Football.RData")
colnames(x)
lm(papprove ~ Post + osu + Post:osu)
football <- load("Busby_Football.RData")
lm(papprove ~ Post + osu + Post:osu, data = football)
class(papprove)
class(football$papprove)
load("Busby_Football.RData")
lm(papprove ~ Post + osu + Post:osu, data = Busby_Football)
load("Busby_Football.RData")
colnames(x)
lm(papprove ~ Post + osu + Post:osu, data = x)
View(x)
post <- 4.5619 - 0.4469 -0.3780 - 0.8960
pre <- 4.5619 - 0.3780
post-pre
4.5619 + (-0.3780)
4.5619 - 0.4469 - 0.3780 + 0.8960
4.5619 -0.4469
post-pre
